1) Вывод - цепочка промежуточных результатов после применения правила.
Пример:
S => Aba => ba
1    6

2) Таких последовательностей правил найти не удалось.

Если определить, что для одного нетерминала путём применения разных правил возможно получить одну и ту же цепочку, то в грамматике возможно получить неэквивалентные выводы.

3) Дополнив функцию use_rule следующими строками:
	output += " => " + self.seq
	output_rules += str(command) + (' ' * (4 + len(prev_seq) - 1))
- возможно формировать вывод.
В функции run_process печатаем вывод:
	print("Вывод:")
        print(self.output)
        print(self.output_rules)

Пример:
Терминальная цепочка: baaba
Последовательность правил: 1 5 7 8 6 
ЛСФ ДВ: S(A(B(b)aB(aA(e)))ba)
Вывод:
S => Aba => BaBba => baBba => baaAba => baaba
1    5      7        8        6         

4) В функции run_check_process печатаем вывод:
	print("Вывод:")
        print(self.output)
        print(self.output_rules)

Для правил получим:
Введенная последовательность правил: 1 4 7 5 3 7 7 6 6 4 6 2 3 6 6
Примененная последовательность правил: 1 4 ~7
Результат: Нет
Вывод:
S => Aba => AaSba
1    4      

Введенная последовательность правил: 1 7 4 3 6 6 5 7 4 2 3 6 6 6 7
Примененная последовательность правил: 1 ~7
Результат: Нет
Вывод:
S => Aba
1    

Введенная последовательность правил: 1 4 5 7 7 4 6 2 1 6 7 3 6 6 7
Примененная последовательность правил: 1 4 ~5
Результат: Нет
Вывод:
S => Aba => AaSba
1    4      

Введенная последовательность правил: 1 4 3 5 7 6 6 7 7 4 2 6 6 7 6
Примененная последовательность правил: 1 4 3 5 ~7
Результат: Нет
Вывод:
S => Aba => AaSba => AacAbAba => BaBacAbAba
1    4      3        5      

5) Например, последовательность правил: 1 4 3 5 7 6 5 7 7 7 - при левом выводе 3-е по счёту правило не может быть применено, при выводе применить можно.